#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Don't let the machines win. You are humanity's last hope...
 **/

int main()
{
    const int width = 3; // the number of cells on the X axis
    //cin >> width; cin.ignore();
    const int height = 3; // the number of cells on the Y axis
    //cin >> height; cin.ignore();
    int index = 0;
    int matriks[height][width];
    int x1, y1, x2, y2, x3, y3;
    int k = 1;
    for (int i = 0; i < height; i++) {
        string line;
        getline(cin, line); // width characters, each either 0 or .

        for (int j = 0; j < width; j++)
        {
            matriks[i][j] = line[j];
        }
    }


    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            if (matriks[i][j] == '0') //checks current position
            {
                x1 = j;
                y1 = i;
                while ((matriks[i][j + k] == '.') && (j + k != width))
                {
                    k++;
                }
                //cout << k << " <- k in 1\n" << endl; // debug
                if ((matriks[i][j + k] == '0') && (j + k != width))//checks the right pos
                {
                    x2 = j + k;
                    y2 = i;
                }
                else
                {
                    x2 = -1;
                    y2 = -1;
                }
                //cout << k << " <- k in 2\n" << endl; // debug
                k = 1;
                while ((matriks[i + k][j] == '.') && (i + k != height))
                {
                    k++;
                }
                if (matriks[i + k][j] == '0' && (i + k != height))//checks under the pos
                {
                    x3 = j;
                    y3 = i + k;
                }
                else
                {
                    x3 = -1;
                    y3 = -1;
                }
                //cout << k <<" <- k in 3\n" << endl; // debug
                k = 1;
                cout << x1 << " " << y1 << " " << x2 << " " << y2 << " " << x3 << " " << y3 << endl;
            }
        }
        //cout << x1 << " " << y1 << " " << x2 << " " << y2 << " " << x3 << " " << y3 << endl;
    }
    // Three coordinates: a node, its right neighbor, its bottom neighbor
    //cout << "0 0 1 0 0 1" << endl;

    // ideas checks
    // for (int k = 1; matriks[i][j+k]=='.';k++)
    // do {
    //     k++;
    // } while ((matriks[i][j+k]=='.')&&(j+k != height))
    //     k++;

}
